class Event {
  constructor(element) {
    this.ele = element
  }
  add(type, cb) {
    if (this.ele.addEventListener) {
      this.ele.addEventListener(type, cb, false)
    } else if (this.ele.attachEvent) {
      if (type.startsWith('custom')) {
        if (isNaN(this.ele.type)) {
          this.ele.type = 0
        }
        const callback = (ev) => {
          ev = ev || window.event;
          if (ev.propertyName === type) {
            cb.apply(this.ele)
          }
        }
        this.ele.attachEvent('onpropertychange', callback);
        (!this.ele[`cb:${type}`] || new Map()).set(cb, callback)
      } else {
        this.ele.attachEvent(`on${type}`, cb)
      }
    } else {
      this.ele[`on${type}`] = cb
    }
    return this
  }
  remove(type, cb) {
    if (this.ele.removeEventListener) {
      this.ele.removeEventListener(type, cb, false)
    } else if (this.ele.attachEvent) {
      if (type.startsWith('custom') && this.ele[`cb:${type}`].has(cb)) {
        this.ele.detachEvent('onpropertychange', this.ele[`cb:${type}`].get(cb));
        this.ele[`cb:${type}`].delete(cb)
      } else {
        this.ele.detachEvent(`on${type}`, cb)
      }
    } else {
      this.ele[`on${type}`] = null
    }
    return this
  }
  trigger(type) {
    if (this.ele.dispatchEvent) {
      let evt = document.createEvent('Event');
      evt.initEvent(type, true, true);
      this.ele.dispatchEvent(evt)
    } else {
      if (type.startsWith('custom')) {
        this.ele.type += 1
      } else {
        this.ele.fireEvent(`on${type}`)
      }
    }
    return this
  }
}